-- Create trigger function if it doesn't exist
CREATE OR REPLACE FUNCTION trigger_set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create venue_business_hours table
CREATE TABLE IF NOT EXISTS venue_business_hours (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    venue_id BIGINT NOT NULL REFERENCES venues(id) ON DELETE CASCADE,
    days_of_week INTEGER[] NOT NULL,  -- Array of days (0=Sunday, 1=Monday, etc.)
    start_time TEXT NOT NULL,         -- Format: 'HH:MM'
    end_time TEXT NOT NULL,           -- Format: 'HH:MM'
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add RLS policies
ALTER TABLE venue_business_hours ENABLE ROW LEVEL SECURITY;

-- Venue owners can read and write their venue's business hours
CREATE POLICY "Venue owners can manage their venue business hours" 
ON venue_business_hours
USING (
    venue_id IN (
        SELECT id FROM venues WHERE owner_id = auth.uid()
    )
);

-- Allow public read access to venue business hours
CREATE POLICY "Anyone can read venue business hours" 
ON venue_business_hours
FOR SELECT
USING (true);

-- Add updated_at trigger
CREATE TRIGGER set_updated_at
BEFORE UPDATE ON venue_business_hours
FOR EACH ROW
EXECUTE FUNCTION trigger_set_updated_at();

-- Add indexes
CREATE INDEX idx_venue_business_hours_venue_id ON venue_business_hours (venue_id); 